(
    greeting: "+OK POP3 server ready.\r\n",

    capa: ["STLS", "TOP", "USER", "SASL CRAM-MD5 KERBEROS_V4", "RESP-CODES", "LOGIN-DELAY 900", "PIPELINING", "EXPIRE 60", "UIDL", "IMPLEMENTATION fake_mail_server"],
    capa_auth: ["TOP", "USER", "SASL CRAM-MD5 KERBEROS_V4", "RESP-CODES", "LOGIN-DELAY 900", "PIPELINING", "EXPIRE 60", "UIDL", "IMPLEMENTATION fake_mail_server"],
    capa_tls: ["TOP", "USER", "SASL CRAM-MD5 KERBEROS_V4", "RESP-CODES", "LOGIN-DELAY 900", "PIPELINING", "EXPIRE 60", "UIDL", "IMPLEMENTATION fake_mail_server"],
    capa_tls_auth: ["TOP", "USER", "SASL CRAM-MD5 KERBEROS_V4", "RESP-CODES", "LOGIN-DELAY 900", "PIPELINING", "EXPIRE 60", "UIDL", "IMPLEMENTATION fake_mail_server"],

    // 1) What is the first command after STLS the client issues?

    // 2) If you know the command, uncomment the following line and see if the client waits for it.
    // (Example "auth" is based on Thunderbirds behaviour.)
    //ignore_commands_tls: ["auth"],

    // 2) Evaluate if answer to the command can be injected in plaintext.
    // Uncomment the following line and see if client proceeds now.
    stls_response: "+OK Begin fake TLS negotiation now.\r\n¹³¹²³¹²³¹²³¹²³²¹³¹²³¹²³²¹³¹²³¹²³¹²³¹²³",

    pkcs12: (
        file: "certs/example.org.p12",
        password: "changeit",
    ),
    implicit_tls: false,
)
